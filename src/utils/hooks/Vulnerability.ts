import { ScanResult } from '../securityScanner';

export class VulnerabilityScanner {
  runSelectedScans(target: string, selectedScans: string[]): Promise<ScanResult> {
    const scanResults: { [key: string]: ScanResult } = {};

    selectedScans.forEach(async (scan) => {
      switch (scan) {
        case 'xss':
          scanResults[scan] = await this.checkXSS(target);
          break;
        case 'csrf':
          scanResults[scan] = await this.checkCSRF(target);
          break;
        case 'clickjacking':
          scanResults[scan] = await this.checkClickjacking(target);
          break;
        case 'sql-injection':
          scanResults[scan] = await this.checkSQLInjection(target);
          break;
        case 'ssl-tls':
          scanResults[scan] = await this.checkSSLTLS(target);
          break;
        case 'fully-vuln-scan':
          scanResults[scan] = await this.performFullVulnerabilityScan(target);
          break;
        default:
          scanResults[scan] = {
            status: 'error',
            message: `Unknown scan type: ${scan}`,
          };
      }
    });

    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          status: 'success',
          message: 'Vulnerability scans completed',
          details: scanResults,
        });
      }, 1000);
    });
  }

  async checkXSS(target: string): Promise<ScanResult> {
    return this.checkVulnerability(target, '/vulnerability/xss');
  }

  async checkCSRF(target: string): Promise<ScanResult> {
    return this.checkVulnerability(target, '/vulnerability/csrf');
  }

  async checkClickjacking(target: string): Promise<ScanResult> {
    return this.checkVulnerability(target, '/vulnerability/clickjacking');
  }

  async checkSQLInjection(target: string): Promise<ScanResult> {
    return this.checkVulnerability(target, '/vulnerability/sql-injection');
  }

  async checkSSLTLS(target: string): Promise<ScanResult> {
    return this.checkVulnerability(target, '/vulnerability/ssl-tls');
  }

  async performFullVulnerabilityScan(target: string): Promise<ScanResult> {
    return this.checkVulnerability(target, '/vulnerability/fully-vuln-scan');
  }

  private async checkVulnerability(target: string, endpoint: string): Promise<ScanResult> {
    try {
      const response = await fetch(`http://localhost:3001${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url: target })
      });

      const data = await response.json();
      
      if (data.status === 'error') {
        throw new Error(data.message);
      }

      return {
        status: 'success',
        message: `Vulnerability check for ${endpoint} completed`,
        details: data
      };
    } catch (error) {
      return {
        status: 'error',
        message: `Vulnerability check for ${endpoint} failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }
}